diff --git a/backend/src/app.module.ts b/backend/src/app.module.ts
index dd912054..98248df8 100644
--- a/backend/src/app.module.ts
+++ b/backend/src/app.module.ts
@@ -5,8 +5,10 @@ import { TwoFaModule } from './two_fa/two_fa.module';
 import { UsersModule } from './users/users.module';
 import { TypeOrmModule } from '@nestjs/typeorm';
 import { User } from './entities/user.entity';
-// import { AppController } from './app.controller';
-// import { AppService } from './app.service';
+import { UsersService } from './users/users.service';
+import { UsersController } from './users/users.controller';
+import { ChannelsModule } from './channels/channels.module';
+import { Channel } from './channels/entities/channel.entity';
 import { ConfigModule } from '@nestjs/config';
 import { ConfigService } from '@nestjs/config';
 
@@ -27,7 +29,7 @@ import { SocketModule } from './socket/socket.module'
 				username: config.get('POSTGRES_USER'),
 				password: config.get('POSTGRES_PASSWORD'),
 				database: config.get('POSTGRES_DB'),
-				entities: [User],
+				entities: [User, Channel],
 				synchronize: true,
 			}),
 			inject: [ConfigService],
@@ -36,7 +38,8 @@ import { SocketModule } from './socket/socket.module'
 		UsersModule,
 		AuthModule,
 		TwoFaModule,
-		SocketModule],
+		SocketModule,
+		ChannelsModule,],
 	// controllers: [AppController],
 	// providers: [AppService],
 })



diff --git a/backend/src/main.ts b/backend/src/main.ts
index c2546f7b..4b4f1045 100644
--- a/backend/src/main.ts
+++ b/backend/src/main.ts
@@ -1,9 +1,13 @@
 import { NestFactory } from '@nestjs/core';
 import { AppModule } from './app.module';
+import { ValidationPipe } from '@nestjs/common';
 import * as cookieParser from 'cookie-parser';
 
 async function bootstrap() {
   const app = await NestFactory.create(AppModule);
+    app.useGlobalPipes(new ValidationPipe({
+    whitelist: true,
+  }));
   app.use(cookieParser());
   app.enableCors({
     origin: ["http://localhost:3000"],





diff --git a/frontend/src/App.tsx b/frontend/src/App.tsx
index 77fb766c..76ed0f96 100644
--- a/frontend/src/App.tsx
+++ b/frontend/src/App.tsx
@@ -12,6 +12,8 @@ import TwoFa from './components/TwoFa/TwoFa';
 import Lobby from './components/Pong/Lobby';
 import { UserProvider } from './model/userContext';
 import { useState, useEffect } from 'react';
+import Channel from './components/User/Channel/Channel';
+import ChannelChat from './components/User/Channel/ChannelChat/ChannelChat';
 
 function App() {
   const [connected, setConnected] = useState(false);
@@ -27,21 +29,22 @@ function App() {
 
     await fetch('http://localhost:5000/auth/clear_cookie', requestOptions);
   };
-  
+
   const handleStorageChange = (event: StorageEvent) => {
-    console.log(event);
-    if (event.key === 'user') {
-      if (event.newValue === null) {
-        clearCookie();
-        setConnected(false);
-        console.log('localStorage has been cleared');
-      } else {
-        setConnected(true);
-        console.log("connected");
-      }
+    if (storage === null) {
+      clearCookie();
+      setConnected(false);
+      console.log('disconnected');
+    } else {
+      setConnected(true);
+      console.log("connected");
     }
   };
 
+  //useEffect(() => {
+  //  handleStorageChange(storage);
+  //}, [storage])
+
   useEffect(() => {
     window.addEventListener('storage', handleStorageChange);
 
@@ -66,7 +69,7 @@ function App() {
           {connected ? (
             <Route path="/" element={<Navigate to="/profile" />} />
           ) : (
-            <Route path="/" element={<Login />} />
+            <Route path="/" element={<Login setStorage={setStorage} />} />
           )}
           <Route
             path="/profile"
@@ -79,6 +82,9 @@ function App() {
           <Route path="/page1" element={<Page1 />} />
           <Route path="/twofa" element={<TwoFa />} />
           <Route path='/lobby' element={<Lobby />} />
+          <Route path='/channel' element={<Channel />}>
+          <Route path="/channel/:id" element={<ChannelChat />} />
+        </Route>
         </Routes>
       </div>
     </UserProvider>



diff --git a/frontend/src/components/Login/Login.tsx b/frontend/src/components/Login/Login.tsx
index 9b01e3f8..93979403 100644
--- a/frontend/src/components/Login/Login.tsx
+++ b/frontend/src/components/Login/Login.tsx
@@ -1,9 +1,15 @@
 import './Login.scss';
 import { useEffect, useRef } from 'react';
 
-function Login() {
-	const canvasRef = useRef<HTMLCanvasElement>(null);
+//const [storage, setStorage] = useState(localStorage.getItem("user"));
+
+interface LoginProps {
+	setStorage: (value: string) => void;
+}
 
+function Login({ setStorage }: LoginProps) {
+	const canvasRef = useRef<HTMLCanvasElement>(null);
+	setStorage(localStorage.getItem("user"));
 	useEffect(() => {
 		const canvas = canvasRef.current!;
 		if (!canvas) {



diff --git a/frontend/src/components/NavBar/NavBar.tsx b/frontend/src/components/NavBar/NavBar.tsx
index 6803776d..b87a6127 100644
--- a/frontend/src/components/NavBar/NavBar.tsx
+++ b/frontend/src/components/NavBar/NavBar.tsx
@@ -37,8 +37,8 @@ function NavBar() {
 					<img src={userImg} alt="" />
 				</Link>
 			</div>
-			<div className={active.active === "friends" ? "selectedLink" : ""}>
-				<Link to={"/message"} onClick={() => active.setActive("message")}>
+			<div>
+				<Link to={"/channel"}>
 					<img src={crowdImg} alt="" />
 				</Link>
 			</div>




diff --git a/postgres_db/init.sh b/postgres_db/init.sh
index ea386441..80243998 100644
--- a/postgres_db/init.sh
+++ b/postgres_db/init.sh
@@ -3,20 +3,54 @@ set -e
 
 psql -U "$POSTGRES_USER" "$POSTGRES_DB" <<EOF
 
+CREATE TABLE "user" (
+  id SERIAL PRIMARY KEY,
+  pseudo VARCHAR(255) NOT NULL,
+  password VARCHAR(255) NOT NULL,
+  status VARCHAR(255) DEFAULT '',
+  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
+);
+
+CREATE TYPE channel_type_enum AS ENUM ('public', 'private', 'protected');
+
 CREATE TABLE channel (
-    id SERIAL PRIMARY KEY,
-    name VARCHAR(255) NOT NULL,
-    description VARCHAR(255) DEFAULT '',
-    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
-    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
+  id SERIAL PRIMARY KEY,
+  owner INTEGER NOT NULL,
+  name VARCHAR(255) NOT NULL UNIQUE,
+  type channel_type_enum NOT NULL,
+  password VARCHAR(255)
 );
 
-CREATE TABLE "user" (
-    id SERIAL PRIMARY KEY,
-    pseudo VARCHAR(255) NOT NULL,
-    password VARCHAR(255) NOT NULL,
-    status VARCHAR(255) DEFAULT '',
-    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
-    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
+CREATE TABLE chan_user (
+  id SERIAL PRIMARY KEY,
+  "user" INTEGER NOT NULL,
+  channel INTEGER NOT NULL
+);
+
+CREATE TABLE message (
+  id SERIAL PRIMARY KEY,
+  creator INTEGER NOT NULL,
+  channel INTEGER NOT NULL,
+  content TEXT
+);
+
+CREATE TABLE chan_admins (
+  id SERIAL PRIMARY KEY,
+  channel INTEGER NOT NULL,
+  "user" INTEGER NOT NULL
+);
+
+CREATE TABLE muted_user (
+  id SERIAL PRIMARY KEY,
+  channel INTEGER NOT NULL,
+  "user" INTEGER NOT NULL,
+  until DATE
+);
+
+CREATE TABLE ban_user (
+  id SERIAL PRIMARY KEY,
+  channel INTEGER NOT NULL,
+  "user" INTEGER NOT NULL
 );
-EOF
\ No newline at end of file
+EOF
